WEBVTT

NOTE
title: Swift Community Podcast Episode 1: Welcome to the show!
url: https://www.swiftcommunitypodcast.org/episodes/1
audio_url: http://static1.squarespace.com/static/5c3a400b96e76fd46e675eb0/t/5c3e7ae82b6a28d251e677c6/1547599053434/SwiftCommunityPodcast-Episode1.mp3/original/SwiftCommunityPodcast-Episode1.mp3

NOTE
This transcript has been generated by an automated transcription service and
manually edited for readability. It's not a verbatim transcription of every word
that was said. If you spot an error, please submit a pull request to the Swift
Community Podcast repo at https://github.com/SwiftCommunityPodcast/podcast.
Thank you!

00:00:00.540 --> 00:00:21.250
<v John Sundell>欢迎收听第一期 Swift 社区播客 - 一个由 Swift 社区制作的关于 Swift 社区的播客。我是主持之一， John Sundell。这期和我一起的还有两位超棒的嘉宾，第一位是大家或许听过的 Swift Coders 播客的主持人 - Garric Nahapetian 先生。Garric 最近怎么样？

00:00:21.380 --> 00:00:24.270
<v Garric Nahapetian>好极了。非常感谢你邀请我来。你最近呢？

00:00:24.460 --> 00:00:35.970
<v John Sundell>我非常好。我们这一期节目的第三位也是最后一位主持人，那就非 Swift 的创造者莫属了，Chris Lattner 先生。Chris，最近怎么样？  

00:00:35.980 --> 00:00:40.750
<v Chris Lattner>不错。我也非常高兴能参加节目，John。虽然还有一点紧张和害怕，但还能接受。

00:00:40.890 --> 00:00:46.790
<v John Sundell>录节目就是应该这样啦，对吧？五味杂陈同时带有一些兴奋的感觉。

00:00:46.800 --> 00:00:47.430
<v Chris Lattner>这是蛮好的。

00:00:47.610 --> 00:01:12.280
<v John Sundell>那么在我们深入第一集节目之前，我想要聊一下这个节目本身，为什么我们要做这个节目，及就理念而言是什么让它独一无二。同时我们想要谈一下当前 Swift 的状态，以社区是如何走到现在的。首先让我们来快速地向听众们介绍一下我们自己吧。Garric，要不然就你先来讲一下你在忙些什么吧？

00:01:12.280 --> 00:01:41.050
<v Garric Nahapetian>Hi，Swift 社区。我的名字叫 Garric Nahapetian。我是 Tinder 的 iOS 工程师。《Swift Coders》 播客的创始人及主持人。但我们最近有一点断更啦。我一直都非常期待这一期节目的录制，所以我现在特别高兴我真的参与其中了。我感觉我又是一个播客了。耶！并且我也是 Swift Coders 社区的创始人。我们有各个城市的学习 Swift 小组，我们还有个 Swift Coders 的 Slack 团队。

00:01:41.640 --> 00:01:58.580
<v Garric Nahapetian>并且我们还有一个 Swift Coders network 播客。我们所做的最大的事情应该就是我们各个城市的学习 Swift 小组了。在全世界我们大概有 15、16 个学习 Swift 小组。所以我这段时间最大的投入

00:01:59.230 --> 00:02:05.598
<v Garric Nahapetian>就是接触外界，通过现实生活中的会面来帮助人们学习 Swift，以及在世界各地启动更多的学习组。

00:02:05.698 --> 00:02:14.008
<v John Sundell>这真的很酷。你对将 Swift 作为第一个语言有什么感受吗？它对你来说是一个好教的语言吗？还有它对于人们上手学习方便吗？

00:02:14.018 --> 00:02:46.818
<v Garric Nahapetian>它绝对是语言初学者的最佳选择。我觉得我会成为 iOS 工程师就是因为 Swift。我曾经试着学过 Objective-C，但相比起来 Swift 简单多了。所以，是的，我觉得这是非常好的起点。要是时间足够的话，我们可以多聊聊这个。但实际上我在世界上其他地方说的最重要的事情之一是购买 Mac 的成本，以及现在大多数人都想做一个 iPhone 应用。但 Mac 真的很贵，所以这是一道很高的门槛。但我们在努力帮助人们接触它。它是开源的，这真的很重要。

00:02:47.008 --> 00:02:59.918
<v John Sundell>对，这真的很酷。开源部分对于你来说也很重要对吧？Chris。自从你离职以及将 Swift 开放给世界之后，最近在干嘛呢？

00:03:00.128 --> 00:03:09.418
<v Chris Lattner>我有过不少头衔。比如对 Swift 编译器的贡献，我属于 Swift 核心团队，我长期推动并且照料着 Swift。

00:03:10.478 --> 00:03:18.018
<v Chris Lattner>虽然现在我有了其他的身份。但我依然非常关注着社区，并且我真的很想知道我能做点什么来帮助。

00:03:19.438 --> 00:03:27.948
<v Chris Lattner>很大程度上这个节目就是为了这个目的。我觉得这是一个非常好的与大家接触的渠道，我们待会也可以聊点这个节目怎么来的。

00:03:28.468 --> 00:03:40.048
<v Chris Lattner>对我个人来说，这完全是一个闲余时间的项目。我不以任何官方身份代表我的雇主或者其他的什么。我只是非常在意社区，并且想要看看它会怎么成长，并且做一点新奇的东西。

00:03:40.108 --> 00:04:03.938
<v John Sundell>那确实很酷。我觉得总体来说社区就是为什么我们三个能聚在一起，并且开始了解对方的原因。并且我觉得这也是让 Swift 与众不同的原因。很显然也有不少的编程语言同样拥有很强大的社区。但是这确实是让我个人非常喜欢 Swift 以及相比当初喜欢 Objective-C 时，更让我激动的原因。


00:04:04.107 --> 00:04:20.117
<v John Sundell>我一直都只是将 Objective-C 视作某种达到目的的手段，一种创建应用的方式。作为编程语言，它从来都不是我想要产生密切联系的东西。而围绕着 Swift 的社区以及人们向其贡献的各种方式，这些事情让我特别激动。

00:04:20.127 --> 00:04:45.867
<v Chris Lattner>对，我非常同意。并且虽然现在已经很好了，但总能够更好对吧？这就是我希望这个播客能够产生的作用之一——帮助社区成长并且创造新的东西。现在有大量本应该存在的包，还没被创造出来。甚至还有许多不需要编码就可以让人们参与其中的方式。我对其无限的可能感到非常激动。

00:04:46.107 --> 00:04:48.357
<v John Sundell>太对了，这真的非常酷。

00:04:48.487 --> 00:05:03.097
<v Garric Nahapetian>对，对于 Swift 社区的观点我也完全同意。我认为我能够成为 iOS 工程师就是因为 Swift 是如此地容易掌握。也因为其容易掌握，让它能够被更多的人触及，特别是社区。

00:05:03.207 --> 00:05:12.997
<v Garric Nahapetian>这也让我成为了社区的一份子，并且参与学习。因为我可以查阅到如此之多的免费资源，接触到如此多热心的人。

00:05:13.617 --> 00:05:18.597
<v Garric Nahapetian>所以社区确实是 Swift 的基础。

00:05:19.187 --> 00:05:22.297
<v Garric Nahapetian>事实上 John 你就是其中很有分量的一员。你做的许多事情

00:05:22.887 --> 00:05:24.787
<v Garric Nahapetian>在我刚刚开始起步的时候

00:05:25.417 --> 00:05:33.197
<v Garric Nahapetian>让我对于其可能性无比兴奋。你是我学习和激情地动力。

00:05:33.857 --> 00:05:38.497
<v Garric Nahapetian>所以我想对此向你表示感谢。到你了，你最近怎么样？

00:05:38.887 --> 00:06:21.864
<v John Sundell>首先要说的是，非常高兴能听到你这么说。对我来说能够听到别人说我的工作对他产生了正面的影响，并且帮助了他们发现了新的东西，总是让我特别高兴。而且这真的是这些日子里推动我的能量。我正在经历一个巨大的转型，从一个自由职业者，总是与客户打交道，总是不停地构建应用，到现在为社区创造内容。回到问题，我在运营 swiftbysundell.com，是一个每周更新关于 Swift 文章的网站。我也开展了一些不同主题的系列，我刚刚启动了一个叫 Swift by Sundell Basics 的系列，

00:06:22.454 --> 00:06:52.904
<v John Sundell>这个系列更多地关注在以轻量级地方式描述 Swift 和 iOS 开发中的一些核心概念。同时我也主持着一档关于社区其他各种事情的播客。是的，社区对我来说真的很重要，而我也试着在致力于为社区做更多事情的同时，保持与编码的联系。因为我真的很喜欢编程，我也同时在构建应用，还有一些其他项目什么的。

00:06:53.594 --> 00:07:10.004
<v John Sundell>我尝试着构建一个循环，我会将构建应用和编码的经验，去填充我的内容创作。然后再通过社区中人们对内容的反馈来构建应用和编码。所以，是的。能够创造这样的循环真的很棒。

00:07:10.194 --> 00:07:16.554
<v Chris Lattner>对，我也想说我不仅欣赏你所做的事情，同时惊讶于你所做事情的质量之高。

00:07:16.594 --> 00:07:17.524
<v John Sundell>非常感谢，Chris。

00:07:17.534 --> 00:08:01.724
<v Garric Nahapetian>这就是为什么我第一反应就是让你加入，并且要连哄带骗地让你来作为播客的主要制作人。因为你真的是 Swift 社区中非常重要的组成部分。我觉得有许多人在关注着你，关注你的作品。所以当 Chris 和我在聊起要做这个播客的时候，让你加入就显得非常自然。因为在我看来，对社区来说最重要的事情就是让大家喜欢你。鼓励人们喜欢你，支持你，这样你才能够可持续地做下去，我们当然也是想要帮助你努力走下去。


00:08:02.064 --> 00:08:55.929
<v John Sundell>这真的很酷。并且对我来说也一样，让更多人加入，也同样表示着，你知道，当你看到某个人运营着有庞大用户群的东西时，会很容易让你以为他本来就是这样。比如，objc.io 好像一直都是个很大的网站，或是 NSHipster 或者其他很大的网站。强调这一点对我来说很重要，你知道，仅仅几年前，也就一两年前，几乎没有人知道我是谁。没有人阅读我的文章。我也没有什么文章。所以你知道，事物往往改变得很快。即使你觉得你没有什么读者，只是为社区创造内容也是非常非常好的。即使你是从今天开始，因为你很可能会做出一些很有价值的东西，虽然以前没做过。

00:08:56.059 --> 00:09:20.649
<v Chris Lattner>对。我觉得创造新东西最有趣的地方之一就是这个，至少就我个人经验来说，坚持下去是最重要的。我的意思是，如果你有坚持下去，并且持续让它变得越来越好，那么这个东西一开始是否完美无瑕并不重要，只要它能够持续改进。并且只要你坚持下去，最终它会变得很棒。并且每个人有学习和开始的过程。

00:09:20.839 --> 00:09:22.099
<v John Sundell>对，非常赞同。

00:09:22.639 --> 00:09:46.529
<v John Sundell>所以我对同你们同社区一起来做这件事情感到特别激动。你们就这样找到我，你们两个，然后你告诉了我关于这个播客的点子。不如你来告诉听众们吧，Garric？ 由你开始来告诉大家一些你对这个节目的点子吧。Chris 是怎么加入的，我是怎么加入的，为什么我们现在要在这个节目上和大家聊这些。

00:09:46.669 --> 00:10:01.409
<v Garric Nahapetian>从 WWDC 2018 开始。从那个时候起我做了大概两年的 Swift 程序员播客，大概 80 集吧。我和 Coders L.A 一直在做 Learn Swift L.A。

00:10:01.969 --> 00:10:19.454
<v Garric Nahapetian>然后六个月前刚刚加入 Tinder，我一直在那工作，然后我一直在思考这份工作。对那些不知道我的背景的人说明一下，我曾经是一个律师。然后就辞职了。我开过 Uber，教过自己怎么编程，然后两年后我以 iOS 工程师的身份在 Tiner 工作了，

00:10:20.044 --> 00:10:33.154
<v Garric Nahapetian>但这份成果真的耗费了我很多。我其实不太知道我怎么做到的。就好像我一觉醒来就这样了，就这么发生了。然后到了 WWDC 2018，我还没有做过这么多的播客，一直感觉有点失落

00:10:34.044 --> 00:11:03.154
<v Garric Nahapetian>并且也不是那么有启发。一年前，我想那是我第一次 WWDC，那真的非常有启发。然后我回到了那个地方，在圣荷西的同一个地方，没有感到启发。那是一种不同的能量，我不得不感受到的能量，然后深入其中。在我那样做了之后所发生的事情，真的很有趣。我最后和两个人又了特别有趣的对话，其中一个是 Jesse Squires。他和我坐在一起吃午饭，然后我告诉了他我的感受，

00:11:03.694 --> 00:11:17.754
<v Garric Nahapetian>
然后我们两就在那分享，有他在那聆听我的想法，并且告诉我他的想法真的很鼓舞。然后另一个人就是 Chris。Chris 是 try! Swift 在 WWDC 周五圣荷西的开源大会上的嘉宾。

00:11:18.314 --> 00:11:49.954
<v Garric Nahapetian>我想应该是午饭时间，然后我和 Chris 就看到对方了，然后我们就商量着要不然一起吃饭。然后我们就一起吃了午饭。Chris 和我曾经有过联系。我曾经采访过他。我想我们曾经有过几次对话，然后我就在我的播客中对他进行了采访。但这是第一次我和他在现实生活中接触。我从来没有和他并肩行走过。所以我们从会场一路走回了 WWDC，然后吃了午饭，我把之前的想法也和 Chris 说了，因为他问我：“最近怎么样，有发生什么吗？我注意到你更新播客没有那么频繁了。”然后我就告诉了他。

00:11:50.514 --> 00:11:59.954
<v Garric Nahapetian>然后我们聊了获取灵感的不同方式。像是你不停地做，或者换着方式做，或者你别做。这真的很棒。

00:12:00.594 --> 00:12:09.961
<v Garric Nahapetian>And then some time goes by and he emails me. So we reconnect over email. And he had this idea, like, "Hey, what if we did a show like this?" And I was like, "hmmm."
然后过了一段时间，他给我发来邮件。我们又通过邮件重新联系。然后他就突然：“嘿，有没有可能我们做一个像这样的节目？”然后我就：“唔”。

00:12:11.051 --> 00:12:25.461
<v Garric Nahapetian>And I could kind of sense, maybe he was wanting to exercise his podcasting talents, and I was like, "Well, that sounds cool. Would you want to do it together?" And he was like, "Yeah, that could be cool." So over the course of this summer,
然后我就感觉到或许他是想要运用一下他的播客天赋，然后我就说：“这听起来挺酷的。那你想要一起做吗？”然后他说：“当然啦，这会很酷的。”所以在这个夏天，

00:12:26.151 --> 00:13:24.821
<v Garric Nahapetian>我们就在一起合计。但就在我们准备开始的时候，我们将要按下那个按钮开始录制的时候，他感觉到我的状态并不投入。并且确实如此。我非常庆幸又和他坦诚地开展了那个话题。然后我说：“你知道吗？我真的非常想要做这个，但是我不知道我是否能够完全承担这份责任。”然后他说：“你知道吗？这是关于社区的播客。所以你觉得我们去接触更多社区里的人，寻求他们的帮助怎么样？”然后我就说：“这是个好主意。”在那一刻我终于放松了，但又有一些害怕。就像我到了一个特别富足又很匮乏的地方。就像，我放松了，但是我很害怕。因为我想要这件事只有我和 Chris 两个人。你知道吗？但是当他提到你 John 时，就完全合理了。然后我们拉你入伙。然后我们三个就开始聊天，这一切就非常合理，并且感觉更能引起人们的灵感。

00:13:24.981 --> 00:13:45.401
<v Chris Lattner>我感觉拉 John 入伙是特别好的决定，因为 John 的见解对于节目来说增色不少。并且你知道，这不仅仅是两三个人的事情。这应该是所有想要以任何方式加入的人都能参与的。如果有人想要参与制作节目，那么他们就可以。这应该是关于社区，为了社区，并且由社区制作的。

00:13:45.631 --> 00:13:58.911
<v John Sundell>是的，非常赞同。从我的角度来看，当你找到我问我是否想要加入时，我当然很激动了。因为我特别喜欢播客。虽然我已经在做两档秀了，但为什么不做第三档呢？

00:13:59.461 --> 00:14:32.367
<v John Sundell>但我们都形成共识的是，这并不是一档关于我们某一个人的秀。我们甚至不会出现在所有的秀中。我们将会帮助开展。你可以把这看作是代码仓库中的初次提交，然后会有人对其进行了帮助，贡献，有人想要来播客聊聊，或者有人会想要编辑整理一些资料或是提出接下来播客的主题，所有的这些其实都取决于社区。并且我们也积极地在寻找想要参与的人。


00:14:32.357 --> 00:14:46.767
<v Garric Nahapetian>是的，我是受到了 Jesse Squires 对 Swift Weekly Brief 的安排的启发，现在是 Bas 接管了。所以我觉得可以将这样的模式应用在博客上或许会很奏效。

00:14:47.257 --> 00:15:13.397
<v Chris Lattner>而且你看世界上那些庞大且成功的，并且经久不衰的事物，都有一个共同点就是可扩展性，对吧？如果你依赖于个人，那将不可扩展。所以你吸引到的人越多，你就越是能通过这些掌握不同技能的人来获取优势。来让事情变得更纯粹，更完美。所以 Swift 社区存在如此多样的背景和观点。


00:15:14.437 --> 00:15:15.697
<v Chris Lattner>我觉得人人都有可以贡献的东西。

00:15:15.887 --> 00:15:45.157
<v John Sundell>对，非常同意。有太多的人将自己的能力隐藏了起来，对吧？比如你在某个会议什么的和人聊天，对方说：“啊对，我曾经是音频工程师来着”，或是“我曾经依靠写作为生” 什么的。这些拥有额外技能的人绝对会适合来帮忙创造。播客很有趣，但也对很多不同的部分有要求。这也是我们非常希望那些有意愿参与的人，来帮助我们的地方。


00:15:45.277 --> 00:16:06.777
<v Chris Lattner>对。我觉得这个节目真的很有潜力。因为我们是以多样性以及无固定格式的方式来看待它的。我们可以录制或短或长的节目。我们可以单人或多人录制。一切皆有可能。所以我觉得大家应该给我们提意见，并且加入我们，来帮助它变得更好。

00:16:06.867 --> 00:16:39.531
<v John Sundell>是的。我们会在这期节目末尾稍微提一下，到底大家要怎样才能参与进来，什么样的形式，以及你可以在哪里找到需要的资料来加入。但现在，我想我们应该开始我们这期节目的主要话题了。关于第一期的主要话题，我想要稍微回到 Swift 的起点，然后谈谈社区是怎么来的，Swift 怎么来的。

00:16:40.061 --> 00:16:59.071
<v John Sundell>当然，这一切都始于几年前在 Apple，当你，Chris，开始为编译器编写代码的时候。或许甚至要更早。那不如你来将大家带到那个时间点，告诉我们一些关于 Swift 是如何诞生的？

00:16:59.141 --> 00:17:35.401
<v Chris Lattner>没问题。我想我需要回到大概 WWDC 2010 的时候。我们刚刚启动了 Clang 的 C++ 支持，就像你能想象到的那样，构建一个为众多人使用的 C++ 编译器，这需要耗费非常非常非常多的功夫。我同时感觉特别高兴，但又为此有点精力交瘁，这是一个非常核心的工作，需要高度专注于实现 C++。并且你在实现 C++ 的时候也会想：“这里应该有更好的解决方案啊”。

00:17:36.671 --> 00:17:42.171
<v Chris Lattner>所以我就和一个叫 Bertrand Serlet 的人发起过多次讨论。

00:17:42.911 --> 00:17:50.501
<v Chris Lattner>Bertrand 当时是软件部的头，并且 Bertrand 是个很特别的工程师。他是个很神奇的人。

00:17:51.521 --> 00:18:06.941
<v Chris Lattner>他同时也有点语言极客。他也曾推动过 Objective-C，让 Objective-C 更好。他总是想要从 Objective-C 中发掘更多闪光点，然后让它越来越好。他和我也经常一对一白板交流。

00:18:08.401 --> 00:18:13.441
<v Chris Lattner>Bertrand 负责 Apple 所有的软件，所以他没什么时间。

00:18:13.441 --> 00:18:14.251
<v John Sundell>非常忙的人。

00:18:14.421 --> 00:18:21.952
<v Chris Lattner>是的。但他总是鼓励我在快下班的时候来看看他是否有空。如果他呆得很晚，那我们就会一起盯着白板。

00:18:22.512 --> 00:18:46.962
<v Chris Lattner>我们会聊特别多的事情。比如目标，类型系统的奇怪细节，最后我们将这些讨论转变成推销演示。然后我就在为他编写推销演示的时候，产生了构建一个新语言的想法。那时候代号还叫“Shiny”，就像“你正在构建一个闪亮（Shiny）的新事物。”我那时候还是个《萤火虫》电视剧的粉丝。

00:18:47.012 --> 00:18:50.622
<v John Sundell>对，那文件的后缀就是“.shiny”了？

00:18:51.122 --> 00:19:06.382
<v Chris Lattner>是的，事实上还真是。你知道，在那时它真的超小。基本上就只是我和 Bertrand 在讨论。还有另一个叫 Dave Zarzycki 的超棒的工程师也在某个早期概念讨论的时候加入了进来。

00:19:07.042 --> 00:19:22.892
<v Chris Lattner>但其中有一件特别早就被纳入讨论的事情是内存管理。在那时，我们两都深信不疑一定有更好的办法来解决或者改进内存管理，并且我们要确保内存安全。所以一定要有自动内存管理。

00:19:24.042 --> 00:19:53.922
<v Chris Lattner>其中的一个关键结论是 ARC。我们应该让编译器来掌控，而不是运行时处理。Objective-C 有一个叫 libauto 的垃圾回收机制，但它有一些问题。这就是 Swift 的内部设计讨论起源，以及转变成 Objective-C 特性的由来。有许多东西的诞生，比如 ARC，模块化，甚至字面量等等。其实背后都是来源于 Swift 的研发。

00:19:54.172 --> 00:20:09.432
<v John Sundell>总结一下就是你为 Shiny 后来的 Swift 构想了许多功能，但你说，我们不要等到有一个全新的语言的时候再去实现。让我们提前一点把那些我们真的真的很想要的功能先加到 Objective-C 上。

00:20:09.502 --> 00:20:34.280
<v Chris Lattner>而且你从另一个角度去思考，就会发现 Swift 现在这些显而易见的事情，在当时，对任何人包括我来说都不清晰。我的意思是，Bertrand 那时很棒，当然现在也很棒，因为他总是超级鼓舞人心。他总是能克服疑虑。Bertrand 有点像科学家，他会像要从各方面去触及本质。

00:20:34.970 --> 00:21:01.920
<v Chris Lattner>所以是的，当时有特别多的不确定性，但与此同时又有很多好点子产生。然后他和其他的人都在说，这是创造一个新语言的背后构思的一部分。但你总要问这样一个问题：“为什么不是让现存的东西变得更好？”而答案是：“是的，我们应该让现存的东西更好，很显然”。所以 ARC 和其他的东西最后实现了。

00:21:02.480 --> 00:21:28.380
<v Chris Lattner>但对于 Swift 诞生来说，是由于它的内存安全。你无法在不移除 C 的情况下改进 Objective-C 的内存安全。而如果你移除了 C，那就太多了，并且那也不是 Objective-C 了。
´
00:21:17.420 --> 00:21:30.580
<v Garric Nahapetian>对，将 Swift 的特性加到 Objective-C 上有点像特洛伊木马。因为你已经完成了 Objective-C 相关的工作，这会让人们后面更容易接受 Swift。

00:21:31.010 --> 00:21:55.360
<v Chris Lattner>有趣的内部动态。我想我们当时更多的还是专注于让 Objective-C 和平台更好。就开发 Swift 来说，这是某种降低风险的方式，因为如果你直接上来就说：“我们要一次性把所有东西都推出”，然后所有的东西都未经测试，那么就存在巨大的风险。但是如果你分别先推出小一些的比如全新的内存管理系统

00:21:55.880 --> 00:22:16.890
<v Chris Lattner>然后你同社区一起迭代，调试和开发，把东西做出来，这样就能减少一定的风险。但我觉得 Apple 内部和外部社区都有这样一种声音：“为什么你这样排列优先级？这感觉像我们在瞎子摸象。为什么呢？为什么你要做这个而不是哪个？”因此这里有一些有趣的动态。

00:22:17.110 --> 00:22:49.015
<v Garric Nahapetian>你能简单谈一下那时社区的哪些方面让 Swift 成为了可能吗？你提到了 Bertrand，还有其他先生的名字我不记得了。但你知道，社区中一定有一些金子。

00:22:35.335 --> 00:22:40.995
<v Garric Nahapetian>因为 Swift 社区现在是如此强大，所以我觉得一定有，一些社区中的金子，不管你当时是在 Apple 还是其他地方，那些人让 Swift 成为了可能。

00:22:49.115 --> 00:23:21.715
<v Chris Lattner>Apple 有非常强的工程师团队。那时候他们有很多人在写 Objective-C，他们对于一些事情虽然固执己见，但也同时有着很深的背景知识来构建框架和应用等。所以有许多关于如何让 Objective-C 更棒的想法。有许多厚重的白皮书是由 NeXT 时代就在那工作的杰出人才所撰写的。所以有一个巨大的内部社区在推动着。

00:23:22.475 --> 00:23:31.535
<v Chris Lattner>与此同时，Bertrand 和 Dave 还有我在讨论一些想法，然后我开始着手编写编译器的原型。

00:23:32.785 --> 00:24:09.235
<v Chris Lattner>但显然，我不可能靠自己来构建所有的东西。所以最后在大概 2011 年 4 月，我们和管理层讨论了一下，然后他们同意了在拉几个人进来。这时就是像 Ted Kremenek，Doug Gregor 和 John McCall，还有其他一些特别的工程师被拉进来了。现在回顾一下，还蛮有趣的，因为这是第一次有其他语言和设计的专家

00:24:09.925 --> 00:24:30.245
<v Chris Lattner>以批判性的眼光来审视它。并且他们也有一些真的很尖锐的反馈。也并不是他们故意如此尖锐，而是他们是对的。当时它是真的很糟糕。让世界上关于范型的顶尖专家之一加入

00:24:31.082 --> 00:24:50.062
<v Chris Lattner>并且在团队形成了一种文化，这些成员都曾构建 过 Clang 编译器，并且已经在一起工作了非常多年，创造了非常多有趣的项目。所以能够吸引这些工程师人才，才是实现一切的重点。虽然这只是帮助推动实现它的一小部分人，但这很重要。

00:24:50.222 --> 00:25:04.802
<v John Sundell>我能想象到。那个时间点语言处于什么状态呢？比如说，语法看起来什么样的？编辑器基础设施有哪部分了？是所有的东西都还处于原型，还是说你已经超过这个阶段了？

00:25:04.802 --> 00:25:06.512
<v Chris Lattner>基本上就是原型阶段。

00:25:07.332 --> 00:25:12.492
<v Chris Lattner>这些都是公开的，因为修改历史就是完全公开的。

00:25:13.892 --> 00:25:18.202
<v Chris Lattner>你可以用 git log 命令来查。也有一份更新日志，虽然从头记录的，但也算挺完整的了。

00:25:18.902 --> 00:25:28.402
<v Chris Lattner>在 Doug 加入之前，是没有范型系统的。我们想要范型系统，但我并没有独立设计这个东西的经验。而 Dough 是那个能做的人。

00:25:28.982 --> 00:25:37.002
<v Chris Lattner>我记得特别早期的时候，John 接手负责了实现真正的范型代码，而不只是解析器。那是他负责的主要的部分。

00:25:37.552 --> 00:25:48.112
<v Chris Lattner>有很多已经遗弃的部分，但也有很多一直保留了下来。我想 var 和 func 可以追溯到最开始。对基础语法的想法都很类似。

00:25:48.992 --> 00:26:09.642
<v Chris Lattner>那基本就是个原型。就像我和别人解释的那样，当你在构建新东西时，构思常常比文档更超前，而文档比代码超前。非常类似这样。同时，构思就更远超于代码实现了。

00:26:10.672 --> 00:26:18.672
<v Chris Lattner>另一个对社区来说非常重要的部分是一个叫 Craig Federighi 的人。

00:26:20.002 --> 00:26:29.122
<v Chris Lattner>我想 Craig 在 Apple 社区应该很有名了。他在 2011 年早期时加入项目的。

00:26:29.842 --> 00:26:33.669
<v Chris Lattner>刚好那时是 Bertrand 从 Apple 退休，Craig 接任。

00:26:34.479 --> 00:26:55.899
<v Chris Lattner>现在 Craig 是个非常非常有趣的人。他极富有个人魅力，不仅是在演讲时，同样私下也是这样。但有一件事我想大多数人还没有意识到，Craig 实在是夸张的聪明。他在很多领域都非常资深。并且还有一点是我没预料到的，

00:26:57.009 --> 00:27:18.689
<v Chris Lattner>他还对语言特别了解。在他以前的职位上，他使用 Groovy 以及其他很多我都没有接触过的的语言和东西。他同时还对很多东西都很在意，比如闭包语法，关键字什么的。而且 Craig 真的非常努力

00:27:19.509 --> 00:27:46.619
<v Chris Lattner>地推动和支持使其成为现实，让它与 Objective-C 产生关联，也在意着 Objective-C 的发展，关心 API 以及 API 在 Swift 中会是什么样的等等。还有 Craig 真的对给予很棒的反馈上瘾，他不停地保持着项目和团队的高标准。他对 Swift 如今的形态有很多的帮助。

00:27:46.809 --> 00:27:52.969
<v Garric Nahapetian>他作为第一个在 WWDC 舞台上宣布的人还挺酷的。

00:27:53.029 --> 00:27:53.449
<v Chris Lattner>是的。

00:27:53.609 --> 00:27:55.229
<v John Sundell>然后他就把你引出来了对吧？

00:27:56.169 --> 00:27:59.409
<v John Sundell>那句经典的台词：“ 没有 C 的 Objective-C”。

00:27:59.669 --> 00:28:05.629
<v Chris Lattner>说实话对于这一点我的感受还蛮复杂的，因为这其实并不是它的本质。

00:28:02.789 --> 00:28:05.629
<v John Sundell>这是个不错的口号。

00:28:05.639 --> 00:28:07.939
<v Chris Lattner>对那时候的社区来说，这是正确的话。

00:28:08.329 --> 00:28:27.619
<v John Sundell>对，我的意思是，过去是。因为我其实当时在现场观看 keynote。在那个时期：“没有 C 的 Objective-C”确实从某个角度解释了它。因为当时的背景是，我们都背负着 Objective-C  作为 C 的超集的历史包袱。

00:28:27.839 --> 00:28:47.178
<v John Sundell>而现在我们想要一个新的开始。我们仍然想要 Objective-C 中好的部分，我们为 C 添加的“对象”的那一部分。我们想要保留这些，API 习惯，消息传递，那些好的东西。但要更现代的方式实现。

00:28:47.238 --> 00:29:26.998
<v Chris Lattner>那是当然。让我感动矛盾的原因是，从项目的一开始，我的目标就是要打造一个全栈系统。借鉴所有外面已有的系统，看看分别都有哪些优缺点，然后从中挑选那些最好的想法。然后目标就是你可以用来写固件，可以拿来写脚本，写手机应用，服务端应用或者底层系统代码，适合所有的东西，而不仅仅是某种糟糕的折中方案。所以那个定位绝对是正确的。

00:29:27.718 --> 00:29:35.298
<v Chris Lattner>但我希望，随着时间推移，Swift 可以尽可能以各种方式成长。

00:29:35.538 --> 00:29:44.938
<v Garric Nahapetian>我当时是在家里看的。我没在 WWDC。那时候还只是一个局外人。而且当它被宣布的时候，我完全不知道这意味着什么。

00:29:45.528 --> 00:29:54.628
<v Garric Nahapetian>我只知道大家都很激动，而且我想人们都不确定到底它是什么样的。或者说大家很困惑。

00:29:54.848 --> 00:29:57.778
<v John Sundell>激动和焦虑的混合对吧？

00:29:57.838 --> 00:30:32.178
<v Garric Nahapetian>我只记得当时还不知道它意味着什么。我只知道是个崭新发亮的东西。我想要了解一下，然后学习一下。然后我记得我去听了所有我能找到的播客和文章，去试着理解它的意义。最终，我花了大概 6 个月才意识到它对我的意义，那就是它对我来说要更容易接触。它给了我另一个让我制作 iPhone 应用的机会。

00:30:32.658 --> 00:31:09.181
<v Chris Lattner>这对我想要谈的最后一个团队来说是个完美的切入点。因为你看 Swift 是什么，会说是个编译器，是个语言规则，是 API 的组合，是 IDE。但让它成为现实，并且让它被如此多的人接受的原因是因为开发者出版团队。在 Apple 有一些技术作者通过撰写如《Swift Programming Language》的书。Swift 能够如此成功且迅速地被人接受的很大一部分原因归功于

00:31:10.071 --> 00:31:18.041
<v Chris Lattner>在第一天就有如此高质量的书和文档。而且直到今天这本书仍然还在维护着，这非常了不起。

00:31:18.571 --> 00:31:34.451
<v Chris Lattner>能达成的原因也是因为我们将技术作者们拉入了设计会议。像是 Tim Isted，Brian Lanier 还有 Alex Martini 花费了大量的时间在周会上，

00:31:35.271 --> 00:31:53.731
<v Chris Lattner>我们在那争论着：“我们到底应该用点还是冒号？”，“我们到底是用这个关键字还是那个关键字？”或是“我们要不要把 func 改成 def？”。不仅如此还有类型系统的深度以及代码生成的算法如何工作？我们怎么达到一个很好的性能？String 应该怎么运作的？及其其他不同部分。

00:31:55.071 --> 00:31:59.921
<v Chris Lattner>重申一次，对我来说，就你如何做成事情而言。

00:32:00.671 --> 00:32:11.711
<v Chris Lattner>他们在场不仅仅是可以吸收东西，而是他们做出了大量的贡献，并且他们也是最有力的拥护者之一。你知道，如果你无法解释某个东西，那么那个东西就不够好，对吧？

00:32:12.381 --> 00:32:28.831
<v Chris Lattner>我看过无数系统，先去构建，之后再尝试着去解释。但当你解释的时候真的很尴尬，就好像：“哇，我还不得不解释一下这个东西的解决方案才行。”如果你关闭这种反馈循环，并且添加上文档，在设计阶段就

00:32:29.941 --> 00:32:34.551
<v Chris Lattner>引入“向人们解释”的部分，那么你的结果会更好。

00:32:34.701 --> 00:33:34.386
<v John Sundell>当然了。就好像，当你创造一个产品或什么的时候，你会想个很好的电梯游说。或者说你要想个理由来解释你为什么要这样做。对于技术选型同样的道理。就像你说的，如果你要创造什么，不论是 API，语言或者其他什么你设计的东西，框架，都需要一个简单解释，简单的方式来理解他。并且我完全同意文档，书籍以及网站，都是有着极高质量的语言参考资料。而这也让像我一样懂 iOS，从事 iOS 应用开发数年，并对 Objective-C 和相关 API 很熟悉的人，可以深入并且理解那些我们曾经不了解的新的概念。比如像是范型，或是类型推断。理解这些东西的过程也是以一种非常棒的方式，一种循序渐进地方式。

00:33:34.676 --> 00:33:38.786
<v Chris Lattner>对。这也是我被你的工作所折服的一个原因。

00:33:39.326 --> 00:34:06.216
<v Chris Lattner>因为我可以在带有同理心地在同一时间与一个人交流，我能搞懂他们怎么产生的问题，并且找到对的方式来解释给这个人。但是与大众交流解释其难以执行的设计过程，实在太有挑战性了，因为我自己非常不擅长这一点，也对其表示敬意。这是一种少数人才掌握的超能力。

00:34:06.876 --> 00:34:39.966
<v John Sundell>就像任何事情一样，我觉得重要的是开始，如果你想要学习技能，或者你想要增强技能，我觉得实现目标的方式就是从简单的做起。如果你去看我写的第一篇文章，那真的是很简答。只有几个段落和几段代码示例。还有从一开始我就告诫自己的一个关键点是，永远选择使用真实的，可以产生关联的例子。不要用 foo 和 bar，或是 a，b，c 作为变量命名。

00:34:40.516 --> 00:34:57.718
<v John Sundell>就像你如何在会议中引入了作者们一样，是从一开始就设置一些你认为会有好效果的规则，然后从非常非常简单的开始做起，边学边做。因为大多数技能要掌握的话，只有一个办法就是做。对吧？

00:34:57.908 --> 00:35:33.938
<v Chris Lattner>完全正确。有很多人会说：“噢，Chris 发明了 Swift。”是的，从某种意义上来说是对的，我推动且引导了这个项目许多年。但是这句话忽略了一个事实，也有数百人参与其中的重要部分。构建调试器，构建 IDE，构建 Playgrounds，构建教学内容等等，还有构建社区的方方面面。不仅仅是在 Apple 的人，还有 Apple 之外的

00:35:34.738 --> 00:35:47.238
<v Chris Lattner>他们聚集在一起创造东西，以他们自己的方式贡献着，在许多方面都远远超过了我。这就是为什么 Swift 有了现在的地位。这就是我看到它成长的原因。

00:35:47.458 --> 00:35:53.838
<v Garric Nahapetian>这也是我们想做这个播客的原因之一，让这些人也能得到一些曝光。

00:35:54.928 --> 00:36:18.668
<v Garric Nahapetian>当然，可能所有人都知道 John，有一些人知道我，有许多人知道你，Chris。还有很多人产生了相同的影响，但人们不知道他们的存在。所以希望随着时间推移，有一天我们能把这些人请到节目中来，让聚光灯也照到他们。那些在 Apple 内部工作或者是在开源社区工作的人。

00:36:20.338 --> 00:36:28.038
<v Garric Nahapetian>我们可以请他们来，让大家认识他们，向他们学习，分享他们的故事。并且希望也能启发并且鼓舞到他人。

00:36:28.278 --> 00:36:53.806
<v John Sundell>赞同。那么 Garric，你之前提到了你在家里看到介绍 Swift 的 WWDC 的 keynote。然后你就开始阅读更多关于它的资料，并且试着再给自己一次学习 iOS 开发的机会。然后呢？你怎么成为了 Swift 开发者？什么时候你第一次真正地使用 Swift 编码？

00:36:53.966 --> 00:37:16.256
<v Garric Nahapetian>那是 Swift 被宣布了，然后我开始试着理解到底这意味着什么。但我想那个时候，我应该还是律师。大概是那个夏天我开始开 Uber。然后我就有了一个应用的点子，我就一边消化着 WWDC 的视频，一边和其他的开发者一起写这个应用。

00:37:16.786 --> 00:37:23.756
<v Garric Nahapetian>我不打算读那本 Swift 的书，因为我那时真的不怎么懂编程。试试上，我对编程一无所知。所以那本书，

00:37:24.296 --> 00:37:51.256
<v Garric Nahapetian>我可能只读了介绍部分，因为特别好理解。就像你指出的，在数组中的 a，b 和 c 对我来说完全没有意义，如果我不懂为什么要用数组的话。回想起来当时应该是几个月后，有一些像 John 你这样的人，在消化了 Swift 的书之后，生产了更容易理解的内容。得益于 Apple 文档作者出色的工作

00:37:51.846 --> 00:38:10.856
<v Garric Nahapetian>和那些对我这样的人来说更容易理解的内容。我开始感觉：“或许我自己也能做到这个。”Swift 语言本身也带来更多的动力，Swift 是如此的易于理解，读起来就像英语一样，非常人类可理解的英语。

00:38:11.446 --> 00:38:43.156
<v Garric Nahapetian>大概在 2015 年 6 月，我决定再给自己一个机会。所以我就开始学 Swift，平均大概每天晚上学一个小时。我看了很多我能接触到的 Ray Wenderlich 的，还有其他的人的文档，文章。但最终让我想要加入社区的最主要原因是感到被孤立和孤单。

00:38:43.716 --> 00:39:04.684
<v Garric Nahapetian>我当时感觉我是地球上唯一存在这样问题的人——从事着一件事，想要做的却是另一件事。我想要做一款应用，我想要学习 Swift。然后有一天早上我和我妻子在她的办公室，我喝了太多的咖啡，然后我开始想要创建一个交流会，我确实喝了特别多咖啡那个早上，然后我就这么做了。我没有细想，只有一个念头：“我要创建一个交流会”。

00:39:05.434 --> 00:39:19.884
<v Garric Nahapetian>这就是 Learn Swift L.A。它那时真的就是刚刚起步，因为有太多围绕着 Swift 的激动的事情发生了。因为社区，你知道的，各种刺激的事情。所以非常非常早期，然后有许多像我这样的人。

00:39:20.674 --> 00:39:37.284
<v Garric Nahapetian>然后我们就互相学习，然后让我成为了洛杉矶的领导者。我还记在线下，John 你和我在聊如何找到激情和创造灵感等等，这是其中非常重要的一部分。

00:39:37.984 --> 00:39:54.794
<v Garric Nahapetian>对我个人来说，那次聚会激发了我非常多的灵感和能量。推动着我。这是让我能够看得更远更远的原因。然后两年之后我醒来，现在是 Tinder 的 iOS 工程师了。这就是大部分社区中交流会的作用。

00:39:55.214 --> 00:40:03.164
<v Chris Lattner>那你呢，John？当时作为听众，在毫无预兆的情况下听到这样重量级炸弹消息感觉是什么样的？

00:40:03.774 --> 00:40:56.678
<v John Sundell>我当时极其激动。因为我有着 C# 和 JavaScript 的背景。所以我在学习 Objective-C 的时候，有这两种语言支撑。我真的很喜欢 Objective-C，最主要的原因是 API 以及 Cocoa 等等。但是我也完全准备好在这些方面接受更现代的设计理念了。所以当这个重量级消息公布时，我字面意义上地跑到了莫斯克尼 WWDC 的一个区域，那里有以太网线，你可以直接插上电脑来下载 XCode 测试版。因为你没办法通过 Wi-Fi 下载。所以我跑过去，安装好了 XCode，然后我打开了 Playground。这就是我编写 Swift 代码的第一印象。

00:40:57.268 --> 00:41:12.378
<v John Sundell>我得承认，在那时，playground 并不是特别稳定。要让它正常地工作，有许多斗争。但是当让它工作起来时，给我带来了许多欢乐。我写了特别多的代码。

00:41:12.918 --> 00:41:32.318
<v John Sundell>那时候我在 Spotify 工作。那正是我从美国回到瑞典的时间，我甚至还和几个前同事在 Spotify 应用里用 Swift 构建了一个功能的原型。那对我来说真的是个很好的学习体验，因为它让我能从

00:41:32.828 --> 00:42:03.058
<v John Sundell>各种方面与 Objective-C 进行对比。如何与 Objective-C API 交互的，去了解区别，了解用 Swift 来构建真实的东西是什么样的。那时候还是 Swift 1。从那个时候起我就在关注着它的动态。并且从我下定决心离开 Spotify，成为自由职业者起，我就知道我要百分之百地专注于 Swift，这也引导我自身更多地投入到了开源社区和内容创作等事情中。

00:42:04.008 --> 00:42:15.288
<v John Sundell>这一切都源自，我意识到这真的是个很酷的语言，并且写起来感觉比 Objective-C 更友好，虽然我也还是特别喜欢 Objective-C。

00:42:15.438 --> 00:42:23.788
<v Chris Lattner>我觉得很奇妙的一点是，人们会很快意识到你们两个写的 Swift 代码比我要多得多。

00:42:24.658 --> 00:42:35.698
<v Chris Lattner>是的，我知道内部很多的“如何”和“为什么”以及怎么融合在一起等等，但你们才是拥有真实的产品开发和使用经验的人。

00:42:35.708 --> 00:42:45.778
<v John Sundell>对，你仔细想想还蛮好玩的。有一大堆人的工作是 Swift，在编译器上工作，但他们大多数时间都是在写 C++。

00:42:45.998 --> 00:42:59.535
<v John Sundell>快速地聊一下，那是什么样的体验？你设计了这么一个很酷的语言，然后其他人都能用，可你只能继续用 C++。这是什么感受？

00:42:59.855 --> 00:43:10.315
<v Chris Lattner>杀了我吧。非常糟糕。让我继续写 C++ 肯定是宇宙的捉弄。

00:43:11.685 --> 00:44:10.475
<v Chris Lattner>还有一个方面我觉得没有说到。社区中有许多人在写关于 Swift 的博客，是现在 Swift 这么棒的主要原因之一，对吧？这些反馈塑造了 Swift 1 和 2。是这些反馈，讯息，所有的这些抱怨，人们说这不合理，这个那个有问题。这真的塑造并且确定了实现的优先级，并且推动了许多构建工作。Swift 1 的周期意外地很长，好吧不是意外的，是故意在没有错误处理的情况下发布的。它在没有协议扩展等我们绝对想要但排期不合适的情况下发布了。我们知道我们不得不构建这些东西，但头两年有太多的事情是被社区推动着发生的。当 Swift 真的开源了，Swift 的进化是个特别重大的事情，在优化人们时间花费的方面或许很不理想，

00:44:11.255 --> 00:44:15.185
<v Chris Lattner>但这是这真的是必不可少的，让 Swift 真的真的

00:44:15.705 --> 00:44:23.235
<v Chris Lattner>很特别的一部分。我认为这完全归功于社区，以及那些花了时间塑造着推动着 Swift 的人。

00:44:23.425 --> 00:45:14.780
<v John Sundell>是的。我第一个想到的不是文章和内容，而是开源，感觉也给 Swift 带来了很多帮助。比如说像是 Codable，人们重复创造了数以千计的 JSON 映射库。我就是其中之一。我为此构建了 Unbox，因为这在 Objective-C 中你并不会反复思考这些。你只会，好，这是个字典，我去获取这个键里面的东西，我先假设是个字符串。但是当你坐下来在 Swift 中写同样的代码时就会意识到，你需要构建一个巨大的  if let 金字塔。所以我能想象到当大家都需要用各种不同方式的实现，来解决的问题，一定也会渗透到设计过程中。

00:45:14.950 --> 00:45:23.140
<v Chris Lattner>当然，Codable 的设计就来自 Apple 里非 Swift 核心团队的架构团队。

00:45:23.830 --> 00:45:31.160
<v Chris Lattner>他们对此满怀激情，然后他们就提出，推动并且维护着。社区这个词现在看来涵盖了很多种意思对吧？

00:45:32.770 --> 00:46:06.940
<v Chris Lattner>而且你看 Result。为什么 Result 现在出现在了 Swift 5？是因为有很多的人在反反复复地实现它。但核心部门觉得我们真的不想要 Result 这个东西，因为这算是语言的某种失败，而一旦我们有了并发，这就是不必要的了。但社区的呼声非常明确，我们需要这个。长期来看是否合理并不重要，我们要这个。所以社区真的参与了塑造。或许人们不明白社区到底有多少影响力。

00:46:07.330 --> 00:46:22.590
<v John Sundell>说到这个。已经谈了 Swift 的发布以及这么多年过去了。让你现在看看 Swift 的状态，以及它的改变

00:46:23.330 --> 00:46:35.180
<v John Sundell>是否有达到你的预期？如果你有的话？它问世这些年和你最初的想法是否匹配呢？

00:46:35.300 --> 00:47:23.090
<v Chris Lattner>我想期望也会随着时间改变。回到 2010 - 2011 年，它会变成什么我其实没有任何预期。我承认这其实只是一个有趣的业余项目。最开始只是晚上和周末。我白天有工作，有一个业余项目是满足智力上的愉悦和挑战。而随着它逐渐像回事了，启动了 Swift 1 之后，就产生了“我们是否能占领 Objective-C 社区？”的问题。我们是否真的能占领 iOS 生态系统？或者说我们是否能瓜分它？这是一个很严肃的问题。所以我真的很高兴，在今天社区中的绝大多数人是乐于使用 Swift 的。尽管有超级多的工作还等待完成，但看起来在社区中似乎是非常成功的了。

00:47:23.850 --> 00:47:27.450
<v Chris Lattner>还有一个开放边界。Swift 在服务端

00:47:28.510 --> 00:47:31.730
<v Chris Lattner>正在取得很大的进展，但依然有非常多的工作需要完成。

00:47:32.910 --> 00:47:53.910
<v Chris Lattner>还有一些其他的社区。我特别喜欢数学和机器学习社区，并且他们对于世界来说也特别重要。在这些社区中有非常多有意思的人，我觉得 Swift 也能融入其中。我曾经开玩笑，Swift 的目标是占领世界，这是个玩笑目标啦，但

00:47:54.430 --> 00:47:59.170
<v Chris Lattner>这是基于那些热爱使用 Swift 的人的现状开的玩笑。

00:48:00.560 --> 00:48:30.810
<v Chris Lattner>在这种情况下，我非常乐于将这种快乐带给更多的人，然后真的帮助改善世界。各种不幸发生在许多系统中，对吧？人们依然用 C 编写。就漏洞和安全脆弱性等等而言，这真的很不幸。还有一些生态系统的问题我们必须克服，这是我们作为社区能做的。我看不到任何限制来实现这个目标。

00:48:31.100 --> 00:48:41.620
<v Garric Nahapetian>我感觉这个播客也有这种潜力。我有我个人的播客，John 有他的，还有 Swift Unwrapped，Fireside Swift，

00:48:42.210 --> 00:48:49.420
<v Garric Nahapetian>等等其他的播客，我觉得我们达成了一致，我们希望这个播客能够

00:48:50.190 --> 00:49:34.414
<v Garric Nahapetian>向 Swift 社区发声。同时也作为 Swift 社区的耳朵，以及另一个除了论坛之外的交流点。虽然现在在 Twitter，论坛和交流会上有许多的讨论，但同时，希望这个播客可以成为枢纽点来找到我们应该做什么，各目标的不同点是什么还有我们怎么能互相帮助达成这些目标？不是所有人都熟悉论坛上的交流。对我而言，有一个意料之外的事情就是，当我和非 Swift 开发者交流时，比如 JavaScript 开发者

00:49:35.044 --> 00:49:40.914
<v Garric Nahapetian>或者其他什么开发者。你知道，我爱 Swift。我对它也充满激情。但当我和他们讨论的时候，他们往往会泼冷水

00:49:41.504 --> 00:49:44.534
<v Garric Nahapetian>然后说：“噢，这不可能啦”

00:49:45.454 --> 00:50:04.214
<v Garric Nahapetian>然后另一方面我在想，John，你最近提到过。Swift 胃口很大。还有就像你指出来的，Chris 人们真的非常非常喜欢 Swift。所以我们可以继续做我们正在做的事情，

00:50:05.574 --> 00:50:18.494
<v Garric Nahapetian>保持社区的成长，同时引入其他的社区，让我们对其他社区来说也是可触及的，或许我们应该想一个更好的表述，那就是 Swift 可以成为世界的主导语言。

00:50:18.774 --> 00:50:34.114
<v Chris Lattner>虽然这很大程度上是关于 Swift 积极乐观的讨论，Swift 依然有很多问题。而且我们也应该以开放的态度来讨论，并且将其视作解决问题的联系对吧？

00:50:34.804 --> 00:50:47.524
<v Chris Lattner>比如还有很重要的关于 Linux 生态系统的问题。此刻 Windows 的生态几乎还没建立起来。为了使它触及更广的受众，还有许多事情需要做。

00:50:47.664 --> 00:52:09.789
<v John Sundell>是的，很有趣的是你提到的那些很多并不是 Apple 平台的开发者，但融入了 Swift 的人。比如像 Objective-C，几乎只有给 Mac 或者 iOS 写应用的人才会使用。同样在 Swift 的早期，甚至是头几年，我并不知道确切的数字，但我猜有 90% 以上的人在为 Apple 的平台写 Swift 的代码。但现在我遇到越来越多的接触 Swift，学习它，甚至用 Swift 工作的人，并不是 Apple 平台的开发者。他们将它用于服务器，或者其他的任务。有这些人进入社区，我觉得有让人感觉特别激动，但同时也给我们带来一些挑战。就拿我举例子，当我在写作时，我常常是以一个 iOS 开发者的角度来写。而那些来自其他服务端语言正在使用 Swift 的人，他们将会面临的是另外的问题和优先级。当然未来这些碰撞会变得有趣起来。这些像是 Windows，Linux 以及 Apple 平台的事情，你打算如何平衡处理的呢？

00:52:09.799 --> 00:52:23.609
<v Chris Lattner>我认为我们共同的目标就是创造一个具有包容性的社区。但如果你不是一个 Apple 平台的开发者，那么每一次你在搜索某个 Swift 内容，结果看到的都是 iOS 的讨论时，可能会感觉到有一些隔阂。

00:52:24.039 --> 00:52:26.629
<v John Sundell>哈，太典型了，“这是如何在 UIViewConroller 中的处理方法”

00:52:26.639 --> 00:52:36.249
<v Chris Lattner>是的。这会让你感觉是个局外人，并且让人接受到错误的信号。我想没有人故意这样的，但感觉就是如此。

00:52:37.069 --> 00:52:46.229
<v Chris Lattner>这是社区所面临的一个挑战。我不知道对于这些问题有没有什么简单有效的答案，但我觉得我们会找到的。

00:52:46.359 --> 00:53:14.815
<v John Sundell>是的，这个我认为开放的设计演化过程会产生很重要的作用。任何人都可以提出建议，提出自己的理由。我们可以收集到这些故事的不同方面的想法。那么从你的角度来看，Swift Evolution 现在发展得怎么样？未来几年会朝什么方向发展？

00:53:14.815 --> 00:53:18.885
<v Garric Nahapetian>事实上我没怎么参与 Swift Evolution。

00:53:19.405 --> 00:54:01.625
<v Garric Nahapetian>你知道，他们用的邮件列表太传统了，你不得不为此注册个什么邮件的东西。然后有大量的邮件来往。我感觉这也确实不是我可以参与贡献的方式。或者说我并未受到这个演变过程的启发。我或许会读一下那些情愿，但我从未评论过。可我很早就注意到，参与到演化过程，读写提案，讨论这些情愿，只是其中一种贡献的方式。我觉得这是种让我感觉很酷，但又很困惑的方式。

00:54:02.225 --> 00:54:24.785
<v Garric Nahapetian>因为在网上和社区中被讨论的最多的是“我们现在拿语言做点什么？或者语言应该怎么演化？”但事实上又有很多的事情在背后已经发生了，这是社区的一部分。但这并不是与编程相关的。

00:54:25.515 --> 00:55:11.672
<v Garric Nahapetian>就像是我在做一个关于 Swift 的播客，这是和社区的一部分，但我并没有在谈论具体的代码。这一点真的很奇怪。感觉自己作为社区的一部分，但又觉得“噢，我到底真的有在参与贡献吗？”但过去一年左右，我一直在说服自己，我的贡献是我有能力成为一个社区的领导者，将大家聚集到一起并且帮助社区更容易被触及。我想说的是，我非常高兴它被移动到了论坛。虽然这件事我只是一个旁观者，这也没关系。你可以看看我所达到的目标，我所做的事情。我已经以这种方式融入了 Swift，虽然没有融入到演化过程中，但也没关系。

00:55:11.822 --> 00:55:36.392
<v Chris Lattner>对。要聊这个的话我大概能聊五个小时，因为这真的很复杂。我想一个简短的答案就是，开放胜于封闭。如果你可以让更多的人参与，你会得到一个更好的结果。所以虽然我觉得 Swift Evolution 的流程有很多问题。

00:55:37.032 --> 00:55:55.832
<v Chris Lattner>Garric 也指出了其中的一些。但我觉得总的来说是一件正面的事情。这也是一种强大的，能减缓语言演化速度的制度。我觉得这是好的。我觉得对演化来说反复思考和细心考虑要比快速发展更重要。

00:55:56.462 --> 00:56:02.332
<v Chris Lattner>同时我也觉得这样能强制性地增加一定数量的文档和流程，这很重要。

00:56:03.162 --> 00:56:14.342
<v Chris Lattner>这也确实提供了一种有趣的方式能让 Apple 和社区协作。这很棒。

00:56:15.462 --> 00:56:42.172
<v Chris Lattner>我不认为 Swift Evolution 是一种固定了的形式。它随着时间已经改变了很多，并且是将设计的权利交社区还是将设计的优先级交给社区，一直也是艰难的抉择。我觉得其挑战在于如果你完全交由社区决定，那么你会陷入无数细节中。但又有许多重要的事情需要再 Swift 的世界里发生，比如包括并发。

00:56:42.702 --> 00:57:02.132
<v Chris Lattner>这是需要很多努力的，而且这在一个由底向上的社区流程中很难做到。所以我说不好。我觉得 Swift Evolution 是个很好的东西。我真的很庆幸我们有它。我同意它不是唯一的选择，并且也不应该是唯一的选择，但是我认为整体来看它很不错。

00:57:02.572 --> 00:57:06.902
<v Garric Nahapetian>那你呢？John，你是如何融入到演化过程的？是写了提案还是什么？

00:57:07.105 --> 00:57:58.985
<v John Sundell>我读了很多关于演化过程的东西。我也读了很多提案，但像你一样，我并没有参与多少讨论。很大程度上这是我自己的决定。你知道在某一刻你会画一条线，然后说，我接下来将要专注于哪些方面？对我来说，是那些和我的网站相关的事情以及各种各样的项目。我说过，至少目前我会迅速地了解一些关于 Swift Evolution 的进展。偶尔我会评论一下，但我并不会投入很多精力或者说踊跃地参与。但也也不一定，就像任何事情都会演变，我也同样。慢慢看吧。

00:57:58.995 --> 00:59:04.165
<v Garric Nahapetian>我觉得这个播客还能做到的一件事情就是为 Swift 社区中的方方面面都带来曝光。比如我的播客大部分是关于 iOS 开发者们的，但只是在 Swift 社区中的人们创造很酷的东西。我们会讨论人。而你的播客，你热衷于和很多 iOS 开发者讨论关于 iOS 的事情，你会就他们构建的东西深入细节，同样你也会聊聊与他们个人相关的。并且你还有个非常深入地以技术视角介绍 Swift 演化和 Swift 功能细节的 Swift Unwrapped 。但对于这个播客我非常激动地一点是它的可能性。Chris 一直在说，这几乎像是个综艺节目，可以谈论各种人以各种能力来一起建立这个语言。比如在任何一个城市或者社区，都包含了各种类型的人或事或动态，而 Swift 确实具有这些。所以我觉得接下来能够发掘到那些

00:59:05.305 --> 00:59:15.093
<v Garric Nahapetian>连我都不知道的事情是令人兴奋的。在这个社区里有各种各样有趣的事情正在发生，我也对于接下来将这些事情背后的故事搬上这个播客，而感到激动不已。

00:59:15.213 --> 01:00:02.733
<v John Sundell>非常赞同。你也提到了一个关键点，那就是有各种不同的参与贡献的方式。即使你是一个没有时间，或者不感兴趣完全没有参与到演化过程中的人。你可以选择观望，然后以你的方式来参与其中。宽泛，也是 Swift 社区美妙的地方之一。在某种意义上，你可以以无数种方式参与贡献。我想要拉回来一点，Chris 你早先说过，你说如果可以你想要某种形态的仪式，而不是去处理已经作出的改变。

01:00:03.293 --> 01:00:08.903
<v John Sundell>我觉得这也很重要。而且我们需要记住的一件事是

01:00:09.893 --> 01:00:51.363
<v John Sundell>我们在这里聊天，大家在这里听着节目，我们可能都对于语言本身特别激动。我们都在期待着将要发生的事情，我们都参与其中，我们都在关注着正在发生的事情。但是对于许多许多人来说，就像我之前觉得 Objective-C 只是一种我用于完成工作的工具一样，很多人也这么看待 Swift。那如果它改变得太快，每个月变成另一种全新的东西，这对于很多人来说就太累了。所以我在想，不如我们退一步，好的，这个流程确实有一点长，但它也能产出更好的结果，并且会有一个更稳健的节奏。所以我觉得这样也不错。

01:00:51.513 --> 01:00:57.993
<v Chris Lattner>对，每一次改变，某种需要意义上来说也需要时间去消化。当一次主要的新功能出现时，

01:00:58.923 --> 01:01:06.083
<v Chris Lattner>需要花费时间来让社区弄清楚如何应用以及如何与其他东西的搭配。因此花费时间去做是很好的。

01:01:06.703 --> 01:01:36.092
<v Chris Lattner>我从 Swift Evolution 中学到的第一件事就是社区催化剂的力量。Swift Evolution 真的聚集了社区中的语言极客们，来关注着 Swift 这个项目中的特定的一面。所以我一直在寻找是什么样的催化剂，能让 Swift 包的生态系统起飞，让 Swift 在服务端社区起飞，让机器学习社区能够一同创造那些酷炫的事情。

01:01:36.992 --> 01:01:48.852
<v Chris Lattner>以及我们如何找到催化剂，使人们能够在论坛上聚在一起，并真正发挥他们的力量，不仅获取能量，还能获得才能，使人们以协作的方式共同努力。

01:01:49.142 --> 01:02:06.302
<v Garric Nahapetian>对。然后维持着这股能量。让人们对 Swift 服务端的应用也保持激动。但之后我们要如何延续呢？我们如何去支持人们，比如像 John 这样的人？我们怎么去支撑着社区中的大家，怀着那股劲儿持续推动前进？

01:02:07.092 --> 01:02:24.002
<v John Sundell>你们觉得我们是不是可以稍微再聊一下人们如何加入，然后就结束这集节目？如果你现在正在听这集节目，然后你感觉这听起来蛮酷的，我能帮点什么，或者我自己如何可以加入，我要做点什么

01:02:24.532 --> 01:02:34.292
<v John Sundell>才能让这个播客持续做下去并且越来越好？Garric，要不然就由你开始吧？有哪些方式可以让大家来对这个节目进行贡献？

01:02:34.392 --> 01:02:55.502
<v Garric Nahapetian>我是被 Jesse Squires 在 Swift Weekly Brief 使用的方式启发了。它几乎就是个完全托管在 GitHub 的自动化开源通讯。下一集发布内容是在 GitHub。完全的 markdown 格式。你可以在那和社区讨论下一集的内容。

01:02:56.082 --> 01:03:01.402
<v Garric Nahapetian>你可以在 Github issue 发布评论，然后你点击一个按钮

01:03:02.042 --> 01:03:07.702
<v Garric Nahapetian>就可以生成 issue，我知道肯定还有许多其他的工作，事实上我还发布过一个

01:03:08.292 --> 01:03:09.672
<v Garric Nahapetian>四十多期可能是

01:03:10.202 --> 01:03:24.107
<v Garric Nahapetian>尽管还有很多的工作要做。但这真的很酷，Jesse 的设置给我很大的启发。我不知道目前我们这个播客是否可以做到这种程度，但是我们谈到如何让社区参与，我想，为什么不用上 GitHub 呢？

01:03:24.797 --> 01:03:54.007
<v Garric Nahapetian>所以我们有了一个 GitHub 组织，叫做 Swift Community Podcast。在 https://github.com/SwiftCommunityPodcast 中有一个仓库叫做 podcast。我们会做一个 issue。大家可以在这个 issue 上评论或就他们对于节目的给予反馈。 当然这一切并不是一成不变的。我们真的很希望这能成为社区共同的努力。我们正在建设脚手架的雏形。

01:03:54.547 --> 01:04:05.657
<v Garric Nahapetian>我们会有个 issue 在那。请就你对节目的想法给我们一些评论。然后我想我们会为下一期节目再开启一个 issue，像是讨论下一期节目是什么样之类的。

01:04:05.947 --> 01:04:28.007
<v Chris Lattner>我觉得这样是对的。我觉得他们应该去 GitHub 的仓库或者是 https://www.swiftcommunitypodcast.org/ 网站。这会是一个很好的起点。你可以在那找到 README 文档，里面有所有的详细描述。我想强调的是，这在很大程度上是个实验性质的项目。希望五年后我们会取得成功。到那个时候每个人回过头来看，会觉得这些都很理所当然。

01:04:28.987 --> 01:04:38.067
<v Chris Lattner>但在此刻我们所处的位置，我们并不知道。我们不知道这会成为什么。我们不知道有谁可能愿意参与进来，我们也不知道确切的最佳实践。没有人做过这样的事情。

01:04:38.597 --> 01:04:57.457
<v Chris Lattner>T不过没关系。如果这行不通，那也没关系。并不会产生什么损失，但我更倾向于相信它会成长得很好。会成为那种让那些具有惊人技能，愿意参与到其中并且能以各种不同方式参与贡献的极佳的方式。所以我很期待接下来会发生什么。

01:04:57.697 --> 01:05:36.600
<v John Sundell>对，非常赞同。举一些例子来说明我们正在寻找具备哪种技能的人才，如果你愿意的话。切实参与到节目中的所有事情，无论是做客还是主持，如果你偏好这些的话。甚至是剪辑节目，拼接到一起，或者只是剪辑节目的某一部分，如果你的时间不够充裕。所有的这些事情都有待处理，你可以帮忙一两集，如果你没有时间继续或者你想做点其他的事情，可以就此打住。但真的一切都可以去做。我们所需要的东西的详细信息都在 GitHub 的仓库里。如果你愿意，你也可以作为志愿者来帮忙。

01:05:36.780 --> 01:05:44.250
<v Chris Lattner>Another thing is to suggest topics and drag people in that you think would be really great and reach out to somebody who you think is
另一件事就是话题建议，把那些你觉得特别棒的人拉来，去接触那些你觉得

01:05:44.930 --> 01:05:51.830
<v Chris Lattner>有趣的人才或正在一个有趣的项目上工作的人等等。让我们一起来解决这个问题。

01:05:52.790 --> 01:06:04.410
<v John Sundell>好吧，你们觉得怎么样？我觉得这是一个特别好的结束第一期节目的时机。这事做起来很有趣，我真的很期待看到这个节目在今年以及未来的表现。

01:06:04.560 --> 01:06:06.870
<v Garric Nahapetian>我也是 Chris。感谢

01:06:07.380 --> 01:06:20.000
<v Garric Nahapetian>你踢着我的屁股让我回到广播。以及 John，非常感谢你再次来发挥了带头作用。我非常感谢你所做的工作，并且我希望能够支持你以及像你这样的人

01:06:20.720 --> 01:06:23.360
<v Garric Nahapetian>以此来回馈已经带给我很多东西的社区。

01:06:23.370 --> 01:06:24.350
<v John Sundell>好的。

01:06:24.500 --> 01:06:30.300
<v Chris Lattner>Absolutely. And thank you to both of you, because this is where I insert the meme of I have no idea what I'm doing.
当然。也感谢你们，因为这里就是我可以插入那个流行用语“我完全不知道我在做什么”的时候。

01:06:32.690 --> 01:06:36.710
<v Chris Lattner>因此我也很高兴我接下来能够学到很多东西，对此我感到非常兴奋。

01:06:36.980 --> 01:06:39.610
<v John Sundell>是的，感觉是相互的。

01:06:40.290 --> 01:06:56.600
<v John Sundell>关于这个，我确实知道一点点我在做的事情，但其他的事情嘛，总是很高兴能够学到新事物，并且特别激动能够和你以及社区中的其他成员来一起做这个节目。

01:06:56.690 --> 01:07:02.200
<v Garric Nahapetian>推特. G A R R I C N @garricn 在 Twitter 上。

01:07:02.590 --> 01:07:04.380
<v John Sundell>很好。那你呢？Chris？

01:07:04.910 --> 01:07:14.500
<v Chris Lattner>推特？@clattner_llvm。这是正确的名字。你呢？John。

01:07:14.990 --> 01:07:26.240
<v John Sundell>你们也可以在推特上找到我，我叫 @johnsundell，并且你们也可以在 https://www.swiftbysundell.com/ 找到我的每周文章，以及我的播客 https://www.swiftbysundell.com/podcast。